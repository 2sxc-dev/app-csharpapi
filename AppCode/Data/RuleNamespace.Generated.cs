// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "RuleNamespace.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class RuleNamespace
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   DataClassesGenerator v17.04.01
// App/Edition: App-CSharpApi/
// User:        2sichost
// When:        2024-03-11 18:33:04Z
namespace AppCode.Data
{
  // This is a generated class for RuleNamespace 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// RuleNamespace data. <br/>
  /// Generated 2024-03-11 18:33:04Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.IgnoreAll`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class RuleNamespace: AutoGenerated.ZagRuleNamespace
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.RuleNamespace in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagRuleNamespace: Custom.Data.CustomItem
  {
    /// <summary>
    /// IgnoreAll as bool. <br/>
    /// To get nullable use .Get("IgnoreAll") as bool?;
    /// </summary>
    public bool IgnoreAll => _item.Bool("IgnoreAll");

    /// <summary>
    /// IgnoreTypeMembers as bool. <br/>
    /// To get nullable use .Get("IgnoreTypeMembers") as bool?;
    /// </summary>
    public bool IgnoreTypeMembers => _item.Bool("IgnoreTypeMembers");

    /// <summary>
    /// Notes as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Notes", scrubHtml: true) etc.
    /// </summary>
    public string Notes => _item.String("Notes", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    public new string Title => _item.String("Title", fallback: "");
  }
}